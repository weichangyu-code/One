#类似c++和java，每条语句以分号结束，忽略换行符
#避免和虚函数格式冲突，不支持变量名加括号参数形式
#函数内部不能定义函数
#bool和int不能转换
#构造函数自动换行
#默认参数
#条件和循环语句、break、continue

#类型关键字(数据类型不算关键字)
INTERFACE="interface"
CLASS="class"
THIS="this"
SUPER="super"
THAT="that"

#循环关键字
FOR="for"
WHILE="while"
DO="do"
BREAK="break"
CONTINUE="continue"

#条件关键字
IF="if"
ELSE="else"

#其他关键字
RETURN="return"
blockstart={
blockend=}
IMPORT="import"
OPERATOR="operator"
TRUE="true"
FALSE="false"
NULL="null"
NEW="new"
AUTO="auto"

#前缀定义
STATIC="static"
CONST="const"
VIRTUAL="virtual"
FINAL="final"

#基础定义
number=NUMBER
string=STRING
string(add)=string STRING
boolean=TRUE
boolean=FALSE
char=CHAR
identifier=IDENTIFIER
this=THIS
super=SUPER
null=NULL

#前缀定义
vardefprefixitem=STATIC
vardefprefixitem=CONST
vardefprefix=vardefprefixitem
vardefprefix(add)=vardefprefix vardefprefixitem

#模板定义
templatedef=< multiidentifier >
calltemplate=< multitype >
calltemplate(null)=< >

#构造函数、析构函数
constructdef=identifier funcdefparam codeblock
destructdef=~identifier () codeblock

#函数定义
#特性：模板，默认参数
funcdefparam=( multifuncparamdef )
funcdefparam(null)=()
funcdefreturn=type                              #只支持一个返回
funcdefname(templatedef)=identifier templatedef
funcdefname(identifier)=identifier
funcdefheader=funcdefreturn funcdefname funcdefparam

funcdef(normal)=funcdefheader codeblock
funcdef(static)=STATIC funcdefheader codeblock
funcdef(vnormal)=VIRTUAL funcdefheader codeblock
funcdef(virtual)=VIRTUAL funcdefheader sentenceend

#lambda
lambda=(multiidentifier) codeblock
lambda(null)=() codeblock
newanony=NEW type classbody

#操作符定义
operator=arr
operator=inc
operator=dec
operator=!
operator=~
operator=*
operator=/
operator=%
operator=+
operator=-
operator=rbitmov2
operator=rbitmov
operator=lbitmov
operator=>
operator=gte
operator=<
operator=lte
operator=eq
operator=neq
operator=|
operator=&
operator=^
operator=addassign
operator=subassign
operator=mulassign
operator=divassign
operator=recassign
operator=rbitmovassign
operator=lbitmovassign
operator=rbitmov2assign
operator=bitorassign
operator=bitandassign
operator=bitxorassign
operatordefheader=funcdefreturn OPERATOR operator funcdefparam
operatordef=operatordefheader codeblock
operatordef(virtual)=operatordefheader sentenceend

#函数调用
callfuncparam(null)=()
callfuncparam=( multiexp )
callfunc=var callfuncparam

#符号路径，可以作为变量、函数、类型用
identifierpath=identifier
identifierpath(add)=identifierpath.identifier

#类型路径
typepathitem(template)=identifier calltemplate
typepathitem(identifier)=identifier
typepath=typepathitem
typepath(add)=typepath.typepathitem

#变量
var(identifier)=identifier
var(typepath)=typepath
var(exp)=exp . identifier
var(expthis)=exp . this
var(expsuper)=exp . super
var(this)=this
var(super)=super

#if语句
ifstart=IF ( exp )
if=ifstart codeblock
else=ELSE codeblock
elseifstart=ELSE IF ( exp )
elseif=elseifstart codeblock
ifblockstart=if
ifblockstart(elseif)=ifblockstart elseif
ifblock(else)=ifblockstart else
ifblock=ifblockstart

#for语句
forstart(range)=FOR (vardefnull : exp)					#自动循环
forstart=FOR (multishortsentence ; multishortsentence ; multishortsentence)
forblock=forstart codeblock

#while语句
whilestart=WHILE ( exp )
whileblock=whilestart codeblock
dowhilebody=DO codeblock
dowhileblock=dowhilebody WHILE (exp)

break=BREAK number
break=BREAK
continue=CONTINUE number
continue=CONTINUE

#类型定义
type=typepath
type(arr)=type arr								#数组，可嵌套多层

#表达式规则
exp(number)=number
exp(string)=string
exp(char)=char
exp(boolean)=boolean
exp(null)=null

exp(multishortsentence)=(multishortsentence)						#括号+逗号表达式
exp(exp)=(exp)

exp(callfunc)=callfunc
exp(var)=var
exp(lambda)=lambda

exp(forcetype)=(type) exp						#强转类型

exp(index)=exp[exp]								#数组访问
exp(linc)=inc exp ;; exp(ldec)=dec exp
exp(rinc)=exp inc ;; exp(rdec)=exp dec
exp(positive)=+exp ;; exp(negative)=-exp
exp(not)=!exp ;; exp(bitnot)=~exp
exp(mul)=exp*exp ;; exp(div)=exp/exp ;; exp(rec)=exp%exp
exp(add)=exp+exp ;; exp(sub)=exp-exp
exp(rbitmov)=exp rbitmov exp ;; exp(rbitmov2)=exp rbitmov2 exp ;; exp(lbitmov)=exp lbitmov exp			#>>>高位补0
exp(gt)=exp>exp ;; exp(gte)=exp gte exp ;; exp(lt)=exp<exp ;; exp(lte)=exp lte exp
exp(eq)=exp eq exp ;; exp(neq)=exp neq exp
exp(eqd)=exp eqd exp ;; exp(neq)=exp neqd exp
exp(bitand)=exp&exp
exp(bitxor)=exp^exp
exp(bitor)=exp|exp
exp(and)=exp and exp								#左exp如果为false，不需要计算右边
exp(or)=exp or exp									#类同and，左exp为true，不计算右边
exp(cond)=exp?exp:exp								#根据条件，计算左边还是右边

inc= ++
dec= --
rbitmov2= >>>
rbitmov= >>
lbitmov= <<
gte= >=
lte= <=
eqd= ===
neqd= !==
eq= ==
neq= !=
and= &&
or= ||
arr= []

exp(newobject)=newobject
exp(newarray)=newarray
exp(newanony)=newanony

#新建对象
newarray=NEW type [ exp ]
newobject(param)=NEW type callfuncparam
newobject=NEW type

#赋值语句，这样的编排为了赋值操作从右到左
assign(deepassign)=exp deepassign assign
assign(refassign)=exp=assign
assign(addassign)=exp addassign assign
assign(subassign)=exp subassign assign
assign(mulassign)=exp mulassign assign
assign(divassign)=exp divassign assign
assign(recassign)=exp recassign assign
assign(rbitmovassign)=exp rbitmovassign assign
assign(rbitmov2assign)=exp rbitmov2assign assign
assign(lbitmovassign)=exp lbitmovassign assign
assign(bitandassign)=exp bitandassign assign
assign(bitxorassign)=exp bitxorassign assign
assign(bitorassign)=exp bitorassign assign
assign(andassign)=exp andassign assign
assign(orassign)=exp orassign assign

assign(deepassign)=exp deepassign exp
assign(refassign)=exp = exp
assign(addassign)=exp addassign exp
assign(subassign)=exp subassign exp
assign(mulassign)=exp mulassign exp
assign(divassign)=exp divassign exp
assign(recassign)=exp recassign exp
assign(rbitmovassign)=exp rbitmovassign exp
assign(rbitmov2assign)=exp rbitmov2assign exp
assign(lbitmovassign)=exp lbitmovassign exp
assign(bitandassign)=exp bitandassign exp
assign(bitxorassign)=exp bitxorassign exp
assign(bitorassign)=exp bitorassign exp
assign(andassign)=exp andassign exp
assign(orassign)=exp orassign exp

deepassign= :=
addassign= +=
subassign= -=
mulassign= *=
divassign= /=
recassign= %=
rbitmovassign= >>=
rbitmov2assign= >>>=
lbitmovassign= <<=
bitandassign= &=
bitxorassign= ^=
bitorassign= |=
andassign= &&=
orassign= ||=

exp(assign)=assign

#变量定义
vardefstart(auto)=AUTO identifier=exp              #自动类型，必须赋值
vardefstart(new)=type identifier callfuncparam     #调用构造函数的，必须有类型，不能赋值
vardefstart(assign)=type identifier=exp
vardefstart(array)=type identifier[exp]
vardefstart(normal)=type identifier
vardef(prefix)=vardefprefix vardefstart
vardef=vardefstart

vardefnull(auto)=AUTO identifier
vardefnull(normal)=type identifier

vardeftypestart(new)=type identifier callfuncparam
vardeftypestart(assign)=type identifier=exp
vardeftypestart(array)=type identifier[exp]
vardeftypestart(normal)=type identifier
vardeftype(prefix)=vardefprefix vardeftypestart
vardeftype=vardeftypestart

#逗号相关的规则
multitype=type
multitype(add)=multitype, type			#模板和函数返回值要用

multiidentifier=identifier									#用于模板、FOR循环变量定义
multiidentifier(add)=multiidentifier, identifier

multiexp=exp
multiexp(add)=multiexp, exp						#用于多返回值，和多个一起赋值

multifuncparamdef=vardeftype						    #用于参数定义，和for初始的变量定义
multifuncparamdef(add)=multifuncparamdef, vardeftype	#

shortsentence(exp)=exp				#短句
shortsentence(vardef)=vardef
multishortsentence=shortsentence
multishortsentence(add)=multishortsentence, shortsentence

#返回
return=RETURN exp				#多返回值
return(null)=RETURN

#语句
sentenceend=;
sentence(return)=return sentenceend
sentence(break)=break sentenceend
sentence(continue)=continue sentenceend
sentence(short)=multishortsentence sentenceend
sentence(end)=sentenceend

#类内容
classelement(vardeftype)=vardeftype sentenceend
classelement(funcdef)=funcdef
classelement(classdef)=classdef
classelement(constructdef)=constructdef
classelement(destructdef)=destructdef
classelement(operatordef)=operatordef
classelements=classelement
classelements(add)=classelements classelement

#大括号块
classbody=blockstart classelements blockend
classbody(null)=blockstart blockend
codeblock=blockstart elements blockend
codeblock(null)=blockstart blockend

#文章
block=codeblock
block=ifblock
block=forblock
block=whileblock
block=dowhileblock
element(sentence)=sentence
element(block)=codeblock
element(classdef)=classdef
elements=element
elements(add)=elements element

#类定义
#特性：继承、模板类、虚函数、构造和析构
classidentifier(templatedef)=identifier templatedef
classidentifier(identifier)=identifier
classheaderstart(class)=CLASS classidentifier
classheaderstart(interface)=INTERFACE classidentifier
classparents=typepath
classparents(add)=classparents, typepath
classheader(parents)=classheaderstart : classparents
classheader=classheaderstart
classdef=classheader classbody

#文件
import=IMPORT identifierpath sentenceend
fileelement(import)=import
fileelement(classdef)=classdef
filecontext=fileelement
filecontext(add)=filecontext fileelement
file(null)=FILEEND
file=filecontext FILEEND
